pipeline {
    agent any
    environment {
     imageName = "lowerupper"
     imageTag = "1.0.$env.BUILD_NUMBER"
     GIT_CREDENTIALS_ID = 'github-credentials'
     GIT_BRANCH = 'main' // Specify your branch
     GIT_REPO = 'https://github.com/saurabhsharmaj/lowerupper.git'
  }

    stages {
        stage('Get Code') {
            steps {
                git branch: 'main', url: 'https://github.com/saurabhsharmaj/lowerupper.git'
            }
        }
        stage('Build') {
            steps {
                //sh 'mvn clean install -DskipTests=true'
                bat 'mvn clean install -DskipTests=true'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // def imageName = "lowerupper"
                    // def imageTag = "latest"
                    
                    def dockerfile = """
                        FROM openjdk:11-jre
                        COPY target/lowertoupperCase-0.0.1-SNAPSHOT.jar /app/lowertoupperCase-0.0.1-SNAPSHOT.jar
                        WORKDIR /app
                        ENTRYPOINT ["java", "-jar", "lowertoupperCase-0.0.1-SNAPSHOT.jar"]
                    """
                    
                    writeFile file: 'Dockerfile', text: dockerfile
                    
                    //sh "docker build -t ${imageName}:${imageTag} ."
                    //sh "docker image ls ${imageName}:${imageTag}"
                    bat "docker build -t ${imageName}:${imageTag} ."
                    bat "docker image ls ${imageName}:${imageTag}"
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonarqube-10.6') {
                    //sh 'mvn sonar:sonar'
                    bat 'mvn --version'
                    bat 'mvn sonar:sonar'
                    
                }
            }
        }
        
        stage('Push Docker Image to Nexus') {
            environment {
                NEXUS_CREDENTIALS = credentials('nexus-credentials')
            }
            steps {
                script {
                    def nexusUrl = "192.168.1.41:8083"
                    def nexusRepository = "docker-hosted"
                    def nexusrepourl = "http://192.168.1.41:8083/repository/docker-hosted/" 
                    // http://localhost:8083/repository/docker-hosted/"
                    def dockerImage = "${imageName}:${imageTag}"
                    def nexusImage = "${nexusUrl}/${nexusRepository}/${imageName}:${imageTag}"

                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        withEnv(["DOCKER_LOGIN=\${NEXUS_USERNAME}", "DOCKER_PASSWORD=\${NEXUS_PASSWORD}"]) {
                            // echo "DOCKER_USERNAME: ${env.NEXUS_USERNAME}"
                            // echo "DOCKER_PASSWORD: ${env.NEXUS_PASSWORD}"
                            // sh 'docker login -u ${env.NEXUS_USERNAME} -p ${env.NEXUS_PASSWORD} ${nexusUrl}'
                            //sh "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $nexusrepourl"
                            //sh "docker tag ${dockerImage} ${nexusImage}"
                            //sh "docker push ${nexusImage}"
                            //sh "docker logout $nexusrepourl"
                            bat "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $nexusrepourl"
                            bat "docker tag ${dockerImage} ${nexusImage}"
                            bat "docker push ${nexusImage}"
                            bat "docker logout $nexusrepourl"
                        }
                    }
                }
            }
        }
        stage('push build version in gitOps repo') {
            steps {
                script {
                    //bat "rmdir /s /q lowerupper "
                    
                    checkout([$class: 'GitSCM',
                        branches: [[name: "*/${env.GIT_BRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        userRemoteConfigs: [[
                            url: "${env.GIT_REPO}",
                            credentialsId: "${env.GIT_CREDENTIALS_ID}"
                        ]]
                    ])
                
                    bat """
                         @echo off
                        setlocal
                        set "file=java-lower-upper\\deployment.yaml"
                        powershell -Command "(Get-Content -Raw '%file%') -replace '1\\.0\\.\\d{2}', '$imageTag' | Set-Content '%file%'"
                        endlocal
                        """
                    
                    bat "type java-lower-upper\\deployment.yaml"

                    withCredentials([usernamePassword(credentialsId: 'github-credentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        def encodedPassword = URLEncoder.encode("$GIT_PASSWORD",'UTF-8')
                        bat "git config user.email saurabh.find@gmail.com"
                        bat "git config user.name saurabhsharmaj"
                        bat "git add .\\java-lower-upper\\deployment.yaml"
                        bat "git commit -m \"Triggered Build: ${env.BUILD_NUMBER}\""
                        //bat "git push origin HEAD:main"
                        bat "git push https://${GIT_USERNAME}:${encodedPassword}@github.com/${GIT_USERNAME}/lowerupper.git HEAD:${GIT_BRANCH}"
                    }
                    
                }
            }
        }
        

        
    }
    // post {
    //     always {
    //         // Clean up Docker images after the pipeline run
    //         script {
    //             sh "docker rmi ${NEXUS_URL}/${NEXUS_REPO}/my-java-app:${IMAGE_TAG}"
    //             sh "docker logout ${NEXUS_URL}"
    //         }
    //     }
    // }
}
